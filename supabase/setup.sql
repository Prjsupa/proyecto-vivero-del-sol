-- 1. Crear la tabla para los vendedores
CREATE TABLE IF NOT EXISTS public.sellers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    address TEXT,
    dni TEXT UNIQUE,
    phone TEXT,
    authorized_discount REAL,
    cash_sale_commission REAL,
    collection_commission REAL
);

-- 2. Crear una función para actualizar el campo 'updated_at' automáticamente
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 3. Crear un disparador (trigger) que use la función anterior en cada actualización
DROP TRIGGER IF EXISTS on_sellers_updated ON public.sellers;
CREATE TRIGGER on_sellers_updated
BEFORE UPDATE ON public.sellers
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

-- 4. Habilitar la Seguridad a Nivel de Fila (RLS)
ALTER TABLE public.sellers ENABLE ROW LEVEL SECURITY;

-- 5. Crear políticas de acceso para la tabla 'sellers'
DROP POLICY IF EXISTS "Allow authenticated users to read sellers" ON public.sellers;
CREATE POLICY "Allow authenticated users to read sellers"
ON public.sellers FOR SELECT
TO authenticated
USING (true);

DROP POLICY IF EXISTS "Allow authenticated users to insert sellers" ON public.sellers;
CREATE POLICY "Allow authenticated users to insert sellers"
ON public.sellers FOR INSERT
TO authenticated
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to update sellers" ON public.sellers;
CREATE POLICY "Allow authenticated users to update sellers"
ON public.sellers FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to delete sellers" ON public.sellers;
CREATE POLICY "Allow authenticated users to delete sellers"
ON public.sellers FOR DELETE
TO authenticated
USING (true);


-- 6. Crear la tabla para los tipos de proveedores
CREATE TABLE IF NOT EXISTS public.provider_types (
    code TEXT PRIMARY KEY,
    description TEXT NOT NULL
);

-- 7. Crear la tabla para los proveedores
CREATE TABLE IF NOT EXISTS public.providers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    name TEXT NOT NULL UNIQUE,
    provider_type_code TEXT REFERENCES public.provider_types(code) ON DELETE SET NULL
);

-- 8. Crear disparador para la tabla 'providers'
DROP TRIGGER IF EXISTS on_providers_updated ON public.providers;
CREATE TRIGGER on_providers_updated
BEFORE UPDATE ON public.providers
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();

-- 9. Habilitar RLS para 'providers'
ALTER TABLE public.providers ENABLE ROW LEVEL SECURITY;

-- 10. Políticas de acceso para 'providers'
DROP POLICY IF EXISTS "Allow authenticated users to read providers" ON public.providers;
CREATE POLICY "Allow authenticated users to read providers"
ON public.providers FOR SELECT
TO authenticated
USING (true);

DROP POLICY IF EXISTS "Allow authenticated users to insert providers" ON public.providers;
CREATE POLICY "Allow authenticated users to insert providers"
ON public.providers FOR INSERT
TO authenticated
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to update providers" ON public.providers;
CREATE POLICY "Allow authenticated users to update providers"
ON public.providers FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to delete providers" ON public.providers;
CREATE POLICY "Allow authenticated users to delete providers"
ON public.providers FOR DELETE
TO authenticated
USING (true);


-- 11. Habilitar RLS para 'provider_types'
ALTER TABLE public.provider_types ENABLE ROW LEVEL SECURITY;

-- 12. Políticas de acceso para 'provider_types'
DROP POLICY IF EXISTS "Allow authenticated users to read provider_types" ON public.provider_types;
CREATE POLICY "Allow authenticated users to read provider_types"
ON public.provider_types FOR SELECT
TO authenticated
USING (true);

DROP POLICY IF EXISTS "Allow authenticated users to insert provider_types" ON public.provider_types;
CREATE POLICY "Allow authenticated users to insert provider_types"
ON public.provider_types FOR INSERT
TO authenticated
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to update provider_types" ON public.provider_types;
CREATE POLICY "Allow authenticated users to update provider_types"
ON public.provider_types FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to delete provider_types" ON public.provider_types;
CREATE POLICY "Allow authenticated users to delete provider_types"
ON public.provider_types FOR DELETE
TO authenticated
USING (true);
